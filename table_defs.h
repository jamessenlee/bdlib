#include <smalltable2.hpp>
//generated by create table UnitSiteTable
DEFINE_ATTRIBUTE(UNIT_ID, uint32_t);
DEFINE_ATTRIBUTE(SITE_ID, uint32_t);

typedef ST_TABLE(
        UNIT_ID, SITE_ID,
        ST_UNIQUE_KEY(UNIT_ID, ST_CLUSTER_KEY(SITE_ID)),
        ST_UNIQUE_KEY(UNIT_ID, SITE_ID)) UnitSiteTable;

//generated by create table ValidUnitTable
struct ValidStatus
{
    bool status;
    bool operator==(const ValidStatus& rhs) const {return false;}
};


DEFINE_ATTRIBUTE(VALID_STATUS, ValidStatus);

typedef ST_TABLE(
        UNIT_ID, VALID_STATUS,
        ST_UNIQUE_KEY(UNIT_ID)) ValidUnitTable;



//generated by create table validUnitSiteTable
struct check_is_valid {
    bool operator()(const VALID_STATUS::Type& status) const {
        return 0 == status.status;
    }
};

typedef ST_TABLE(
        UNIT_ID, SITE_ID,
        ST_UNIQUE_KEY(UNIT_ID, ST_CLUSTER_KEY(SITE_ID)),
        ST_UNIQUE_KEY(UNIT_ID, SITE_ID)) ValidUnitSiteTable;

typedef ST_CONNECTOR(
            ValidUnitSiteTable,
            ST_PICK(TBL1<UNIT_ID>, TBL2<SITE_ID>),
            ST_FROM(ValidUnitTable, UnitSiteTable),
            ST_WHERE(
                st::eq(TBL1<UNIT_ID>, TBL2<UNIT_ID>),
                check_is_valid(TBL1<VALID_STATUS>)
            )
        ) ValidUnitSiteCon;

